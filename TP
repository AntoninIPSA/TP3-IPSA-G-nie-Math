import math as m


###################################
def f1(x):
    return x ** 4 + 3 * x - 9


def fder1(x):
    return 4 * x ** 3 + 3


###################################
def f2(x):
    return 3 * m.cos(x) - 2 - x


def fder2(x):
    return -3 * m.sin(x) - 1


###################################
def f3(x):
    return x * m.exp(x) - 7


def fder3(x):
    return m.exp(x) + x * m.exp(x)


###################################
def f4(x):
    return m.exp(x) - x - 10


def fder4(x):
    return m.exp(x) - 1


###################################
def f5(x):
    return 2 * m.tan(x) - x - 5


def fder5(x):
    return (2 / ((m.cos(x)) ** 2)) - 1


###################################
def f6(x):
    return m.exp(x) - x ** 2 - 3


def fder6(x):
    return m.exp(x) - 2 * x


###################################
def f7(x):
    return 3 * x + 4 * m.log(x) - 7


def fder7(x):
    return 3 + (4 / x)


###################################
def f8(x):
    return x ** 4 - 2 * x ** 2 + 4 * x - 17


def fder8(x):
    return 4 * x ** 3 - 4 * x + 4


###################################
def f9(x):
    return m.exp(x) - 2 * m.sin(x) - 7


def fder9(x):
    return m.exp(x) - 2 * m.cos(x)


###################################
def f10(x):
    return m.log(x ** 2 + 4) * m.exp(x) - 10


def fder10(x):
    return ((2 * x) / (x ** 2 + 4)) * m.exp(x) + m.log(x ** 2 + 4) * m.exp(x)


def point_fixe(f, fder, x0, epsilon, Nitermax):
    n = 0
    xold = x0
    xnew = f(xold)
    erreur = (xnew - xold)

    while (abs(erreur) > epsilon) and n < Nitermax:
        xnew = xold - (f(xold) / fder(xold))
        erreur = xnew - xold
        xold = xnew
        print(xnew, erreur, n)
        n += 1


point_fixe(f10, fder10, 1, 1e-10, 1e4)  # g, x0, epsilon, nitermax
